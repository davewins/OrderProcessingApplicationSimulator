{
  "swagger": "2.0",
  "info": {
    "title": "Orders API",
    "version": "v1",
    "description": "API for managing customer orders."
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/orders": {
      "post": {
        "summary": "Place a new order.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Order details to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Order created successfully. Returns the ID of the new order.",
            "schema": {
              "$ref": "#/definitions/OrderCreationResponse"
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error (e.g., simulated backend failure).",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "summary": "Retrieve details of a specific order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Identifier of the order to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Order details retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "Order not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error (e.g., simulated database failure).",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Update the status of an existing order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Identifier of the order to update.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New status for the order.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderStatusUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order status updated successfully."
          },
          "400": {
            "description": "Invalid request payload.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Order not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error (e.g., simulated backend failure).",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/orders/customer/{customerId}": {
      "get": {
        "summary": "Retrieve all orders for a specific customer.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Identifier of the customer to retrieve orders for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of customer orders retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "404": {
            "description": "Customer not found (if you choose to implement this level of simulation).",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error (e.g., simulated database failure).",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Product": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity of the product ordered.",
          "minimum": 1
        }
      }
    },
    "OrderRequest": {
      "type": "object",
      "required": [
        "customerId",
        "products"
      ],
      "properties": {
        "customerId": {
          "type": "string",
          "description": "Identifier of the customer placing the order."
        },
        "products": {
          "type": "array",
          "description": "List of products in the order.",
          "items": {
            "$ref": "#/definitions/Product"
          }
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Unique identifier of the order.",
          "readOnly": true
        },
        "customerId": {
          "type": "string",
          "description": "Identifier of the customer."
        },
        "orderDate": {
          "type": "string",
          "description": "Date and time the order was placed.",
          "format": "date-time",
          "readOnly": true
        },
        "products": {
          "type": "array",
          "description": "List of products in the order.",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "status": {
          "type": "string",
          "description": "Current status of the order.",
          "enum": [
            "Pending",
            "Processing",
            "Shipped",
            "Cancelled"
          ]
        }
      }
    },
    "OrderStatusUpdateRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "description": "New status for the order.",
          "enum": [
            "Processing",
            "Shipped",
            "Cancelled"
          ]
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "description": "Error code."
        },
        "message": {
          "type": "string",
          "description": "Error message."
        }
      }
    },
    "OrderCreationResponse": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "description": "The newly created order ID."
        }
      }
    }
  }
}